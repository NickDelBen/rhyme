/**************************************************************
* Wrapper functions for the rhymebrain api
*
* Created By: Nick DelBen
* Created On: March 10, 2015
*
* Last Edited: March 10, 2015
*   - Created initially
**************************************************************/

rest = require('./lib/rest');

PERFECT_SCORE   = 300;
OFFENSIVE_FLAG  = 'a';
DICTIONARY_FLAG = 'b';

//Add a contains method to the string class
String.prototype.contains = function(substring) { 
  return this.indexOf(substring) != -1; 
};

/*********************
* printWords: prints a set of words based on the specified rules
* @param words:          Array of words to be printed
* @param onlyPerfect:    Flag whether or not to only print 'perfect' rhymes
* @param hideOffensive:  Flag wheter or not to hide 'offensive' results
* @param onlyDictionary: Flag whether or not to hide words that would not appear in a dictionary
* @param showList:       Flag whether or not to display results as a list
*********************/
function printWords(words, onlyPerfect, hideOffensive, onlyDictionary, showList) {
  var numWords;
  var numImperfect;
  var numOffensive;
  var numDictionary;
  var currentWord;
  var wordIterator;
  var delimeter;

  //Define the delimiter for printing words
  delimeter = showList ? '\n' : ', ';

  //Get the number of words to be printer
  numWords = words.length;

  numImperfect  = 0;
  numOffensive  = 0;
  numDictionary = 0;
  currentWord   = 1;

  for (wordIterator = 0; wordIterator < numWords; wordIterator++) {
    //Check if we are hiding imperfect rhymes and this rhyme is imperfect
    if (onlyPerfect && words[wordIterator].score != PERFECT_SCORE) {
      //Increase the imperfect counter
      numImperfect++;
      continue;
    }
    //Check if we are hiding offensive rhymes and this rhyme is offensive
    if (hideOffensive && words[wordIterator].flags.contains(OFFENSIVE_FLAG)) {
      //Increase the offensive counter
      numOffensive++;
      continue;
    }
    //Check if we are hiding words words that wouldnt occur in a dictionary and this word would not
    if (onlyDictionary && ! words[wordIterator].flags.contains(DICTIONARY_FLAG)) {
      //Increase the counter of words that wouldn't occur in a dictionary
      numDictionary++;
      continue;
    }
    //Increase the counter of valid words
    currentWord++;
    //Display the word
    if (wordIterator == 0) {
      process.stdout.write(words[wordIterator].word);
      continue;
    }
    process.stdout.write(delimeter + words[wordIterator].word);
  }
  //Show summary
  process.stdout.write((numImperfect || numOffensive || numDictionary) ? '\n\n' : '\n');
  if (numImperfect) {
    process.stdout.write("Omitted " + numImperfect + " imperfect rhymes. ");
  }
  if (numOffensive) {
    process.stdout.write("Omitted " + numOffensive + " offensive results. ");
  }
  if (numDictionary) {
    process.stdout.write("Omitted " + numDictionary + " results that wouldn't appear in a dictionary.");
  }
  process.stdout.write('\n');
}

/*********************
* getRhymes: finds words that rhyme with the specified word
* @param word:       The word to find rhymes for
* @param numResults: Number of rhyming words to find
* @param onlyPerfect:    Flag whether or not to only print 'perfect' rhymes
* @param hideOffensive:  Flag wheter or not to hide 'offensive' results
* @param onlyDictionary: Flag whether or not to hide words that would not appear in a dictionary
* @param showList:       Flag whether or not to display results as a list
*********************/
function printRhymes(word, numResults, onlyPerfect, hideOffensive, onlyDictionary, showList) {
  var result;
  var options;

  //Options for the js on request
  options = {
    host: 'rhymebrain.com',
    port: 80,
    path: 'http://rhymebrain.com/talk?function=getRhymes&word=' + word + '&maxResults=' + numResults * 100,
    method: 'GET',
    headers: {
      'Content-Type': 'application/json'
    }
  };  

  //Handeler function for json response
  rest.getJSON(options, function (resultStatus, response) {
    var resultSize = Math.min(response.length, numResults);
    process.stdout.write('Found ' + resultSize + ' words that rhyme with ' + word + '.\n\n');
    printWords(response.slice(0, numResults), onlyPerfect, hideOffensive, onlyDictionary, showList);
  });
}

//Export the functions from this document
exports.printWords  = printWords;
exports.printRhymes = printRhymes;